{"ast":null,"code":"var _jsxFileName = \"t:\\\\reactjs\\\\counters-app\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      value: this.props.value\n    };\n\n    this.handleIncrement = product => {\n      this.setState({\n        value: this.state.value + 1\n      }); // Syntax diatas adalah cara untuk mengupdate state (this.setstate)\n      // dengan membawa seluruh properti yang dimiliki oleh state tersebut\n    };\n  }\n\n  render() {\n    //    let classes = this.getBadgeClassess();\n    // Syntax diatas ini dipanggil langusung dengan memasukan syntax\n    // this.getbadgeclassess didalam tag span\n    console.log(\"props\", this.props); // Syntax diatas ini dipanggil untuk mengecek nilai attribute dari\n    //component counters.jsx yang dimasukkan / tampung kedalam PROPS\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.children, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClassess(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleIncrement() // cara passing event argument\n        ,\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  getBadgeClassess() {\n    // baris ini adalah hasil refactoring (encapsulation)\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.value == 0 ? \"warning\" : \"primary\";\n    return classes; // Jika nilai count = 0 maka badge akan berwarna kuning,\n    // sebaliknya berwarna biru.\n  }\n\n  formatCount() {\n    const {\n      value: count\n    } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["t:/reactjs/counters-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","value","props","handleIncrement","product","setState","render","console","log","children","getBadgeClassess","formatCount","classes","count"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AACA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BE,KAD8B,GACtB;AAAEC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD;AAApB,KADsB;;AAAA,SAa9BE,eAb8B,GAaXC,OAAD,IAAa;AAC7B,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd,EAD6B,CAE7B;AACA;AACD,KAjB6B;AAAA;;AAmB9BK,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,KAAKN,KAA1B,EALO,CAMP;AACA;;AACA,wBACE;AAAA,iBACG,KAAKA,KAAL,CAAWO,QADd,eAEE;AAAM,QAAA,SAAS,EAAE,KAAKC,gBAAL,EAAjB;AAAA,kBAA2C,KAAKC,WAAL;AAA3C;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AACE,QAAA,OAAO,EAAE,MAAM,KAAKR,eAAL,EADjB,CACyC;AADzC;AAEE,QAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AACDO,EAAAA,gBAAgB,GAAG;AACjB;AACA,QAAIE,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKZ,KAAL,CAAWC,KAAX,IAAoB,CAApB,GAAwB,SAAxB,GAAoC,SAA/C;AACA,WAAOW,OAAP,CAJiB,CAKjB;AACA;AACD;;AAEDD,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEV,MAAAA,KAAK,EAAEY;AAAT,QAAmB,KAAKb,KAA9B;AACA,WAAOa,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AAtD6B;;AAyDhC,eAAed,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  state = { value: this.props.value };\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>There are no tags !</p>;\r\n  //   return (\r\n  //     <ul>\r\n  //       {this.state.tags.map((tag) => (\r\n  //         <li key={tag}>{tag}</li> // cara merender list item diReact\r\n  //       ))}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n  handleIncrement = (product) => {\r\n    this.setState({ value: this.state.value + 1 });\r\n    // Syntax diatas adalah cara untuk mengupdate state (this.setstate)\r\n    // dengan membawa seluruh properti yang dimiliki oleh state tersebut\r\n  };\r\n\r\n  render() {\r\n    //    let classes = this.getBadgeClassess();\r\n    // Syntax diatas ini dipanggil langusung dengan memasukan syntax\r\n    // this.getbadgeclassess didalam tag span\r\n\r\n    console.log(\"props\", this.props);\r\n    // Syntax diatas ini dipanggil untuk mengecek nilai attribute dari\r\n    //component counters.jsx yang dimasukkan / tampung kedalam PROPS\r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n        <span className={this.getBadgeClassess()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.handleIncrement()} // cara passing event argument\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        {/* {this.state.tags.length === 0 && \"Please create a new Tag\"}\r\n        {this.renderTags()} */}\r\n      </div>\r\n    );\r\n  }\r\n  getBadgeClassess() {\r\n    // baris ini adalah hasil refactoring (encapsulation)\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.state.value == 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n    // Jika nilai count = 0 maka badge akan berwarna kuning,\r\n    // sebaliknya berwarna biru.\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: count } = this.state;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n"]},"metadata":{},"sourceType":"module"}